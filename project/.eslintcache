[{"/snanu/project/src/App.tsx":"1","/snanu/project/src/reportWebVitals.ts":"2","/snanu/project/src/serviceWorkerRegistration.ts":"3","/snanu/project/src/index.tsx":"4","/snanu/project/src/canvas-txt.ts":"5"},{"size":8918,"mtime":1610812959763,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1610298928503,"results":"8","hashOfConfig":"7"},{"size":4802,"mtime":1610368456926,"results":"9","hashOfConfig":"7"},{"size":612,"mtime":1610368486078,"results":"10","hashOfConfig":"7"},{"size":6383,"mtime":1610724587642,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"1uu4gx7",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/snanu/project/src/App.tsx",["23","24","25","26","27","28","29","30","31","32"],"import React, { useState, useEffect, useMemo, FC } from 'react'\nimport canvasTxt from './canvas-txt'\nimport './App.less'\nimport { modzi } from 'lojban'\n\nimport { Button } from 'antd'\nimport { Layout, Menu } from 'antd'\nimport { Form, Input } from 'antd'\nimport { Select, Card } from 'antd'\nimport { Slider } from 'antd'\n\nimport {\n  MenuUnfoldOutlined,\n  MenuFoldOutlined,\n  UserOutlined,\n  VideoCameraOutlined,\n  UploadOutlined,\n} from '@ant-design/icons'\n\nconst { Header, Sider, Content } = Layout\nconst { Option } = Select\n\n\nconst App: FC = () => {\n  const [collapsed, setCollapsed] = useState(false)\n  const [text, setText] = useState('')\n  const [size, setSize] = useState(50)\n  const [family, setFamily] = useState('emoji')\n\n  const canvas_width = 300\n  const canvas_height = 50\n\n  const layout = {\n    labelCol: { span: 8 },\n    wrapperCol: { span: 16 },\n  }\n\n  const fonts = useMemo(\n    () => [\n      { name: 'Emoji', value: 'emoji', line: 1.5 },\n      { name: 'Vrude', value: 'vrude-regular', line: 1.2 },\n      { name: 'Crisa', value: 'crisa', line: 1.2 },\n    ],\n    []\n  )\n\n  const UNICODE_START = 0xed80\n  const lerfu_index = \"ptkflscmx.' 1234bdgvrzjn`-,~    aeiouy    qw    AEIOUY\"\n\n  // const toggle = () => {\n  //   setCollapsed(!collapsed)\n  // }\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      if (!text)\n        for (const font of fonts) call({ text: '', font: font.value, size })\n      else call({ text, font: family, size })\n    }, 100)\n\n    function krulermorna(t: string) {\n      return t\n        .replace(/\\./g, '')\n        .replace(/^/, '.')\n        .toLowerCase()\n        .replace(/([aeiou.])u([aeiou])/g, '$1w$2')\n        .replace(/([aeiou.])i([aeiou])/g, '$1ɩ$2')\n        .replace(/au/g, 'ḁ')\n        .replace(/ai/g, 'ą')\n        .replace(/ei/g, 'ę')\n        .replace(/oi/g, 'ǫ')\n        .replace(/\\./g, '')\n    }\n    function cohukrulermorna(t: string) {\n      return t\n        .replace(/w/g, 'u')\n        .replace(/ɩ/g, 'i')\n        .replace(/ḁ/g, 'au')\n        .replace(/ą/g, 'ai')\n        .replace(/ę/g, 'ei')\n        .replace(/ǫ/g, 'oi')\n    }\n    function latinToZbalermorna(c: string) {\n      if ((c.codePointAt(0) ?? 0) >= 0xed80) {\n        return c ?? ''\n      }\n      if (c === ' ') return ' '\n      if (c === 'h' || c === 'H') c = \"'\"\n      if (lerfu_index.includes(c))\n        return String.fromCodePoint(UNICODE_START + lerfu_index.indexOf(c))\n      else if (lerfu_index.includes(c.toLowerCase()))\n        return String.fromCodePoint(\n          UNICODE_START + lerfu_index.indexOf(c.toLowerCase())\n        )\n      if (c === '\\n') return '\\n'\n      if (c === '\\t') return '\\t'\n      return c\n    }\n\n    function preprocess({ text, font }: { text: string; font: string }) {\n      if (['crisa', 'vrude', 'vrude-regular'].includes(font)) {\n        const ot = \"vlaza'umei\"\n        const rfs = text.split(' ').map((valsi: string) => {\n          return { w: valsi, rfs: [] }\n        })\n        return zbalermornaize({ w: '', ot, rfs })\n      } else if (['modzi', 'emoji'].includes(font)) {\n        return modzi(text, false)\n      } else return text\n    }\n\n    function zbalermornaize({\n      w,\n      ot,\n      rfs,\n    }: {\n      w: string\n      ot: string\n      rfs: any[]\n    }): string | string[] {\n      let word = krulermorna(w)\n      if (ot === \"vlaza'umei\") {\n        return rfs.map((def) => zbalermornaize(def)).join(' ')\n      }\n      word = word\n        .split(/(?=[ɩw])/)\n        .map((spisa: string) =>\n          cohukrulermorna(spisa)\n            .split('')\n            .map((lerfu: string) => latinToZbalermorna(lerfu))\n            .join('')\n        )\n        .join('')\n      return word.replace(/,/g, '')\n    }\n\n    function call({\n      text,\n      font,\n      size,\n      redraw = true,\n    }: {\n      text: string\n      font: string\n      size: number\n      redraw?: boolean\n    }) {\n      const content = document.getElementById('content')\n      const c: any = document.getElementById('myCanvas')\n      const im: any = document.getElementById('myImage')\n      const ctx = c.getContext('2d')\n\n      canvasTxt.lineHeight =\n        (fonts.filter((i: any) => i.value === font)[0].line ?? 1.2) * size\n      canvasTxt.fontSize = size\n      canvasTxt.font = font\n      canvasTxt.vAlign = 'top'\n      // canvasTxt.justify = true\n      let ratio = window.devicePixelRatio\n      const w = content.clientWidth - 10\n      const h = c.height / ratio\n      const w_ = w * ratio\n      const h_ = h * ratio\n      c.style.width = w.toString() + 'px'\n      c.style.height = h.toString() + 'px'\n      im.style.width = w.toString() + 'px'\n      im.style.height = h.toString() + 'px'\n      c.width = w_\n      c.height = h_\n      /* todo: possibly scale canvas\n      // ctx.scale(1 / ratio, 1 / ratio)\n      */\n\n      const { height } = canvasTxt.drawText(\n        ctx,\n        preprocess({ text: (text ?? '').trim(), font }),\n        0,\n        size / 3,\n        w_,\n        h_\n      )\n      ctx.globalCompositeOperation = 'destination-over'\n      ctx.fillStyle = 'white'\n      ctx.fillRect(0, 0, ctx.width, ctx.height)\n      ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n      ctx.globalCompositeOperation = 'source-over'\n\n      im.src = c.toDataURL('image/webp', 1)\n      if (redraw) {\n        im.style.height = c.height = c.style.height = Math.max(\n          height + (size * 2) / 3,\n          canvas_height\n        )\n\n        call({\n          text,\n          font,\n          size,\n          redraw: false,\n        })\n      }\n    }\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [fonts, text, size, family])\n\n  return (\n    <>\n      <Layout>\n        {/* <Sider trigger={null} collapsible collapsed={collapsed}>\n          <div className=\"logo\" />\n          <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\n            <Menu.Item key=\"1\" icon={<UserOutlined />}>\n              nav 1\n            </Menu.Item>\n            <Menu.Item key=\"2\" icon={<VideoCameraOutlined />}>\n              nav 2\n            </Menu.Item>\n            <Menu.Item key=\"3\" icon={<UploadOutlined />}>\n              nav 3\n            </Menu.Item>\n          </Menu>\n        </Sider> */}\n        <Layout className=\"site-layout\">\n          {/* <Header className=\"site-layout-background\" style={{ padding: 0 }}>\n            {collapsed ? (\n              <MenuUnfoldOutlined\n                className=\"trigger\"\n                onClick={() => toggle()}\n              />\n            ) : (\n              <MenuFoldOutlined className=\"trigger\" onClick={() => toggle()} />\n            )}\n          </Header> */}\n          <Content\n            className=\"site-layout-background\"\n            style={{\n              margin: '24px 16px',\n              padding: 24,\n              minHeight: 280,\n            }}\n          >\n            <Form\n              {...layout}\n              name=\"nest-messages\"\n              initialValues={{\n                font: 'emoji',\n                size: 50,\n              }}\n            >\n              <Form.Item name={['text']} label=\"Text\">\n                <Input\n                  allowClear\n                  type=\"text\"\n                  value={text}\n                  onChange={({ target: { value } }) => {\n                    setText(value)\n                  }}\n                />\n                <Button\n                  type=\"link\"\n                  size=\"small\"\n                  onClick={() => {\n                    setText('coi ro do ma nuzba')\n                  }}\n                >\n                  coi ro do ma nuzba\n                </Button>\n              </Form.Item>\n              <Form.Item name=\"font\" label=\"Font\">\n                <Select\n                  onChange={(value: string) => {\n                    setFamily(value)\n                  }}\n                >\n                  {fonts.map((i) => {\n                    return (\n                      <Option key={i.value} value={i.value}>\n                        {i.name}\n                      </Option>\n                    )\n                  })}\n                </Select>\n              </Form.Item>\n              <Form.Item name=\"size\" label=\"Size\">\n                <Slider\n                  min={50}\n                  max={200}\n                  onChange={(value: number) => {\n                    setSize(value)\n                  }}\n                  value={typeof size === 'number' ? size : 50}\n                />\n              </Form.Item>\n            </Form>\n            <Card style={{ textAlign: 'center' }}>\n              <div id=\"content\">\n                <canvas id=\"myCanvas\" style={{ display: 'none' }}></canvas>\n                <img\n                  id=\"myImage\"\n                  alt=\"text\"\n                  style={{ outline: '1px solid #000', width:  canvas_width, height: canvas_height}}\n                />\n              </div>\n            </Card>\n          </Content>\n        </Layout>\n      </Layout>\n    </>\n  )\n}\n\nexport default App\n","/snanu/project/src/reportWebVitals.ts",[],"/snanu/project/src/serviceWorkerRegistration.ts",[],"/snanu/project/src/index.tsx",[],"/snanu/project/src/canvas-txt.ts",[],{"ruleId":"33","severity":1,"message":"34","line":7,"column":18,"nodeType":"35","messageId":"36","endLine":7,"endColumn":22},{"ruleId":"33","severity":1,"message":"37","line":13,"column":3,"nodeType":"35","messageId":"36","endLine":13,"endColumn":21},{"ruleId":"33","severity":1,"message":"38","line":14,"column":3,"nodeType":"35","messageId":"36","endLine":14,"endColumn":19},{"ruleId":"33","severity":1,"message":"39","line":15,"column":3,"nodeType":"35","messageId":"36","endLine":15,"endColumn":15},{"ruleId":"33","severity":1,"message":"40","line":16,"column":3,"nodeType":"35","messageId":"36","endLine":16,"endColumn":22},{"ruleId":"33","severity":1,"message":"41","line":17,"column":3,"nodeType":"35","messageId":"36","endLine":17,"endColumn":17},{"ruleId":"33","severity":1,"message":"42","line":20,"column":9,"nodeType":"35","messageId":"36","endLine":20,"endColumn":15},{"ruleId":"33","severity":1,"message":"43","line":20,"column":17,"nodeType":"35","messageId":"36","endLine":20,"endColumn":22},{"ruleId":"33","severity":1,"message":"44","line":25,"column":10,"nodeType":"35","messageId":"36","endLine":25,"endColumn":19},{"ruleId":"33","severity":1,"message":"45","line":25,"column":21,"nodeType":"35","messageId":"36","endLine":25,"endColumn":33},"@typescript-eslint/no-unused-vars","'Menu' is defined but never used.","Identifier","unusedVar","'MenuUnfoldOutlined' is defined but never used.","'MenuFoldOutlined' is defined but never used.","'UserOutlined' is defined but never used.","'VideoCameraOutlined' is defined but never used.","'UploadOutlined' is defined but never used.","'Header' is assigned a value but never used.","'Sider' is assigned a value but never used.","'collapsed' is assigned a value but never used.","'setCollapsed' is assigned a value but never used."]